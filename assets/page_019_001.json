{"background":{"class":"border_1"},"controls":{"l":"false","r":"false","t":"false","b":"false"},"subtitle":{"selector":"subtitle","text":"editor.component"},"lead":{"selector":"lead","class":"","text":"Rozwiązanie:"},"code":[{"type":"typescript","class":"height_50","code":"    editItem(row: any = null, remove: boolean = false) {\n        /**\n         * go to edit item mode or new item mode or delete item\n         */\n        if (row && !remove) {\n            if (row.id) {\n                this.router.navigate(['/editor', row.id]);\n            } else {\n                this.router.navigate(['/editor']);\n            }\n        } else if (row && remove) {\n            console.log('Delete element', row.id, row);\n            this.ts.removeData(row.id);\n        }\n    }","filename":"table.component.ts"},{"type":"typescript","class":"height_25","code":"import { Injectable } from '@angular/core';\nimport { Headers, Http } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\nimport { FakeData } from '../classes/fake-data';\n\n@Injectable()\nexport class TableService {\n    \n    private apiUrl = 'api/data';\n    public  tableParams = {\n                small: true,\n                striped: false,\n                bordered: false,\n                hover: false\n            };\n    public tableData: FakeData[];   // NEW\n\n    constructor(\n        private http: Http\n    ) { }\n\n    // CHANGED\n    getData(): Promise<FakeData[]> {\n        return this.http.get(this.apiUrl)\n                   .toPromise()\n                   .then((response) => {\n                        this.tableData = response.json().data as FakeData[];\n                        return this.tableData;\n                    })\n                   .catch(this.handleError);\n    }\n    \n    getItemData(id: number): Promise<FakeData> {\n        return this.http.get(this.apiUrl)\n                   .toPromise()\n                   .then(response => response.json().data[id] as FakeData)\n                   .catch(this.handleError);\n    }\n    saveData(data: FakeData) {\n        this.tableData[data.id] = data;\n    }\n    \n    // NEW\n    removeData(id: number) {\n\n        const index = this.tableData.findIndex(el => el.id === id);\n        if (index) {\n            this.tableData.splice(index, 1);\n        }\n    }\n    \n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error);\n        return Promise.reject(error.message || error);\n    }\n}\n","filename":"table.service.ts"}]}