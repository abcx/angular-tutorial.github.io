{"background":{"class":"border_1"},"controls":{"l":"false","r":"false","t":"false","b":"false"},"code":[{"type":"typescript","class":"","code":"/* SystemJS module definition */\ndeclare var module: NodeModule;\ninterface NodeModule {\n  id: string;\n}\n// NEW\ndeclare function saveAs(blob: any, filename: string): any;","filename":"src / typings.d.ts"},{"type":"typescript","class":"height_33","code":"import { Injectable } from '@angular/core';\nimport { Headers, Http } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\nimport { FakeData } from '../classes/fake-data';\n\n@Injectable()\nexport class TableService {\n    \n    private apiUrl = 'api/data';\n    public  tableParams = {\n                small: true,\n                striped: false,\n                bordered: false,\n                hover: false\n            };\n    public tableData: FakeData[];\n\n    constructor(\n        private http: Http\n    ) { }\n\n    getData(): Promise<FakeData[]> {\n        return this.http.get(this.apiUrl)\n                   .toPromise()\n                   .then((response) => {\n                        this.tableData = response.json().data as FakeData[];\n                        return this.tableData;\n                    })\n                   .catch(this.handleError);\n    }\n    \n    getItemData(id: number): Promise<FakeData> {\n        return this.http.get(this.apiUrl)\n                   .toPromise()\n                   .then(response => response.json().data[id] as FakeData)\n                   .catch(this.handleError);\n    }\n    saveData(data: FakeData) {\n        this.tableData[data.id] = data;\n    }\n    \n    removeData(id: number) {\n\n        const index = this.tableData.findIndex(el => el.id === id);\n        if (index) {\n            this.tableData.splice(index, 1);\n        }\n    }\n    \n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error);\n        return Promise.reject(error.message || error);\n    }\n\n    // NEW\n    public downloadFile(filename: string, content: any) {\n        /*\n         * download file (use FileSaver.js library)\n         */\n        const blob: any = new Blob(\n                [JSON.stringify(content)],\n                { type: 'text/json;charset=utf-8' }\n            );\n\n        saveAs(blob, filename); // it is FileSaver's function\n    }\n}\n","filename":"table.service.ts"}],"subtitle":{"selector":"subtitle","text":"Korzystanie z zewnętrznych bibliotek JS"},"lead":{"selector":"lead","class":"","text":"Na przykładzie biblioteki FileSaver."}}