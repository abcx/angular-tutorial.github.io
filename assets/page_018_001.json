{"background":{"class":"border_1"},"controls":{"l":"false","r":"false","t":"false","b":"false"},"subtitle":{"selector":"subtitle","text":"editor.component"},"code":[{"type":"typescript","class":"height_25","code":"import { Component, OnInit, Input } from '@angular/core';\nimport { TableService } from '../../services/table.service';\nimport { FakeData } from '../../classes/fake-data';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.sass']\n})\nexport class TableComponent implements OnInit {\n\n    private data: FakeData[];\n    @Input() params: any;\n    title = 'Tytuł tabeli';\n    \n    constructor(\n        public ts: TableService,\n        public router: Router\n    ) { }\n    \n    ngOnInit() {\n        // CHANGED\n        if (!this.ts.tableData) {\n            this.ts.getData().then(body => {\n                this.data = body;\n                console.log(this.data);\n            });\n            console.log(this.params);\n        }\n    }\n    \n    manageRowClass(d: number) {\n        /**\n         * mark some data rows in table\n         */\n        let klass: string;\n\n        switch (d) {\n            case 4:\n                klass = 'table-success';\n                break;\n            case 6:\n                klass = 'table-danger';\n                break;\n        }\n        return klass || '';\n    }\n    \n    manageTableClass() {\n        /**\n         * set table classes\n         */\n        let klass = [];\n        \n        if (this.params.small) {\n            klass.push('table-sm');\n        }\n        if (this.params.striped) {\n            klass.push('table-striped');\n        }\n        if (this.params.bordered) {\n            klass.push('table-bordered');\n        }\n        if (this.params.hover) {\n            klass.push('table-hover');\n        }\n        return klass.length ? klass.join(' ') : '';\n    }\n    \n    editItem(row: any = null, remove: boolean = false) {\n        /**\n         * go to edit item mode or new item mode\n         */\n        if (row && !remove) {\n            if (row.id) {\n                this.router.navigate(['/editor', row.id]);\n            } else {\n                this.router.navigate(['/editor']);\n            }\n        } else if (row && remove) {\n            console.log('Delete element', row.id);\n        }\n    }\n}\n","filename":"table.component.ts"},{"type":"typescript","class":"height_25","code":"import { Component, OnInit, Input } from '@angular/core';\nimport { TableService } from '../../services/table.service';\nimport { FakeData } from '../../classes/fake-data';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.sass']\n})\nexport class TableComponent implements OnInit {\n\n    private data: FakeData[];\n    @Input() params: any;\n    title = 'Tytuł tabeli';\n    \n    constructor(\n        public ts: TableService,\n        public router: Router\n    ) { }\n    \n    ngOnInit() {\n        if (!this.ts.tableData) {\n            this.ts.getData().then(body => {\n                this.data = body;\n                console.log(this.data);\n            });\n            console.log(this.params);\n        }\n    }\n    \n    manageRowClass(d: number) {\n        /**\n         * mark some data rows in table\n         */\n        let klass: string;\n\n        switch (d) {\n            case 4:\n                klass = 'table-success';\n                break;\n            case 6:\n                klass = 'table-danger';\n                break;\n        }\n        return klass || '';\n    }\n    \n    manageTableClass() {\n        /**\n         * set table classes\n         */\n        let klass = [];\n        \n        if (this.params.small) {\n            klass.push('table-sm');\n        }\n        if (this.params.striped) {\n            klass.push('table-striped');\n        }\n        if (this.params.bordered) {\n            klass.push('table-bordered');\n        }\n        if (this.params.hover) {\n            klass.push('table-hover');\n        }\n        return klass.length ? klass.join(' ') : '';\n    }\n    \n    editItem(row: any = null, remove: boolean = false) {\n        /**\n         * go to edit item mode or new item mode\n         */\n        if (row && !remove) {\n            if (row.id) {\n                this.router.navigate(['/editor', row.id]);\n            } else {\n                this.router.navigate(['/editor']);\n            }\n        } else if (row && remove) {\n            console.log('Delete element', row.id);\n        }\n    }\n}\n","filename":"editor.component.ts"},{"type":"html","class":"height_25","code":"<form>\n    <div class=\"form-group\">\n        <label for=\"id\">ID</label>\n        <input type=\"text\" class=\"form-control\" name=\"id\" value=\"{{item.id}}\" disabled>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"item\">Item</label>\n        <input type=\"text\" class=\"form-control\" name=\"item\" value=\"{{item.item}}\" [(ngModel)]=\"item.item\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"text\">Text</label>\n        <input type=\"text\" class=\"form-control\" name=\"text\" value=\"{{item.text}}\" [(ngModel)]=\"item.text\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"date\">Date</label>\n        <input type=\"text\" class=\"form-control\" name=\"date\" value=\"{{item.date}}\" [(ngModel)]=\"item.date\">\n    </div>\n    <button class=\"btn btn-default\" (click)=\"location.back()\">Anuluj</button>\n    <button class=\"btn btn-primary\" (click)=\"saveData()\">Zapisz</button>\n</form>\n","filename":"editor.component.html"}]}